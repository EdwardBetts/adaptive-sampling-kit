#!/usr/bin/env python
import logging
import os
import os.path
import select
import shutil
import subprocess
import sys
import time

import common.configuration
from common.configuration import Configuration
import common.util
from common.util import fatal

###
# Driver Main Loop
#

# Will contain the configuration and logger singletons
C, L = None, None

       
def call_module(module, params = []):    
    L.debug("Calling {0} module".format(module))
    # Prepare the command line
    # Add the executable
    cmd = [C("modules")[module]["executable"]]
    
    # Append configuration file
    cmd.append(C("configuration_file"))
               
    # Append the input/output params
    cmd += params

    cmd = " ".join(cmd)
    L.debug("  - cmd : <{0}>".format(cmd))
    try:
        p = subprocess.Popen(cmd,
                             stderr=subprocess.PIPE,
                             stdout=subprocess.PIPE,
                             bufsize=1,
                             shell=True)
    except OSError:
        fatal("Could not execute module {0}\n"
              "  {1}".format(module,cmd))
        
    eof_stdout, eof_stderr = False, False
    while(not(eof_stdout and eof_stderr)):
        for fd in select.select([p.stdout, p.stderr], [], [])[0]:
            l = fd.readline()
            if not l:
                if fd == p.stdout:
                    eof_stdout = True
                else:
                    eof_stderr = True
            if fd == p.stderr:
                if l.strip(): L.warning("\t({0}) {1}".format(module, l[:-1]))
            else:
                if l.strip(): L.info("\t({0}) {1}".format(module, l[:-1]))
        
    p.wait()
    if p.returncode !=0:
        if module == "control" and p.returncode == 254: 
            L.info("Control module decided to stop experiments")
            print "Experiments finished normally"
            sys.exit(0)
        else:
            fatal("Module {0} stopped with code {1}"
                  .format(module, p.returncode), p.returncode)
        
def driver_loop():
    L.debug("Starting driver loop")
    
    out_dir = C("output_directory")
    iteration = 0
    labelled = "{0}/labelled.data".format(out_dir)
    while(1):
        L.debug("**** Starting ITERATION {0} ****".format(iteration))
        model = "{0}/model{1:05d}.data".format(out_dir, iteration)
        newly_labelled = "{0}/labelled{1:05d}.data".format(out_dir, iteration)
        requested = "{0}/requested{1:05d}.data".format(out_dir, iteration)

        if iteration == 0:
            # Call bootstrap module to get the initial data
            call_module("bootstrap", params=[newly_labelled])
            if not os.path.exists(newly_labelled):
                fatal("Bootstrap did not produce points "
                      "({0} does not exist)".format(newly_labelled))
        else:
            # Ask oracle to request new points
            call_module("oracle", params=[labelled, requested])
            if not os.path.exists(requested):
                fatal("Oracle did not gave back requests "
                      "({0} does not exist)".format(requested))
                
            # Call source to fulfill the requests
            call_module("source", params=[requested, newly_labelled])
            if not os.path.exists(newly_labelled):
                fatal("Source did not fullfill requests "
                      "({0} does not exist)".format(newly_labelled))

        # Append newly_labelled points to labelled
        L.debug("Updating labelled points")
        orig = open(newly_labelled, "rb")
        dest = open(labelled, "ab")
        shutil.copyfileobj(orig, dest)
        dest.close()
        orig.close()
        iteration += 1

        # Call model module
        call_module("model", params=[labelled, model])

        # Call reporter module
        call_module("reporter", params=[str(iteration),
                                       labelled,
                                       newly_labelled,
                                       model])

        # Call control module (which will decide when to exit this loop)
        call_module("control", params=[str(iteration), labelled, model])
        
def main():
    global C,L
    import argparse
    import shutil
    parser = argparse.ArgumentParser(description="Helps choosing sampling points during experiments.")
    parser.add_argument('--force_overwrite', action='store_true',
                        help="If a previous output directory is found its contents will be overwritten")
    parser.add_argument('configuration', help="the experiment configuration file")
    args = parser.parse_args()
    
    # Setup PYTHONPATH
    if "PYTHONPATH" in os.environ:
        os.environ["PYTHONPATH"] += ":"+os.getcwd() 
    else:
        os.environ["PYTHONPATH"] = os.getcwd() 


    # Setup the DRIVERPATH
    os.environ["DRIVERPATH"] = os.path.dirname(os.path.realpath(__file__))

    # Read Configuration
    C = Configuration(user_configuration=args.configuration,
                      reload_live_configuration = False)

    # Start Logger
    print "Logging to {0}".format(C("log.logfile"))
    L = logging.getLogger(__name__)
    fh = logging.FileHandler(C("log.logfile"))
    formatter = logging.Formatter('[%(asctime)s %(levelname)-8s] %(message)s',
                                  datefmt='%H:%M')
    fh.setFormatter(formatter)
    L.setLevel(eval("logging."+C("log.level")))
    fh.setLevel(eval("logging."+C("log.level")))
    L.addHandler(fh)
    L.debug("Logger started at level {0}".format(C("log.level")))

    # Check that the output directory does not exist
    if os.path.exists(C("output_directory")):
        if args.force_overwrite:
            L.warning("Removing existing output directory {0} since --force_overwrite was passed."
                      .format(C("output_directory")))
            shutil.rmtree(C("output_directory"))
        else:
            fatal("Output directory \"{0}\" already exists. Use --force_overwrite option to discard it."
                  .format(C("output_directory")))
    
    os.makedirs(C("output_directory"))

    # Enter driver loop
    driver_loop()
        


if __name__ == "__main__":
    main()
