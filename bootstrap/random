#!/usr/bin/env python
"""
This module draws random points
"""

import numpy as np
from random import shuffle, randint

from common.configuration import Configuration
from common.util import fatal


def draw_point(factors):
    p = []
    for f in factors:
        if f["type"] == "integer":
            g = randint(int(f["range"]["min"]),
                        int(f["range"]["max"]))
            p.append(g)
        elif f["type"] == "continous":
            g = (random() *
                (f["range"]["max"] - f["range"]["min"]) +
                f["range"]["min"])
            p.append(g)
        elif f["type"] == "categorical":
            g = randint(0, len(f["values"]) - 1)
            p.append(g)
        else:
            fatal("Wrong factor type: <{0}>"
                  .format(f["type"]))
    return tuple(p)


def generate_possible_points(factors, labelled, n):
    # Prepare a list of generators that generate all possible
    # factors satisfying constraints
    count = 0
    tries = 0
    MAX_TRIES = 50
    while(count < n):
        p = draw_point(factors)
        if p in labelled and tries < 50:
            tries += 1
            continue
        else:
            tries = 0
            count += 1
            yield p


def randomsample(configuration, output_file, n):
    already_labelled = set()

    # open a file to write suggested points
    of = open(output_file, "w")
    for p in generate_possible_points(configuration["factors"],
                                      already_labelled,
                                      n):
        already_labelled.add(p)
        of.write(" ".join(map(str, p)) + "\n")
    of.close()


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(
        description="Draws unique random points")
    parser.add_argument('configuration')
    parser.add_argument('output_file')
    args = parser.parse_args()
    conf = Configuration(args.configuration)
    randomsample(
        conf,
        args.output_file,
        conf("modules.bootstrap.params.n", int))
